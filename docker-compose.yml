version: '3.8'

services:
  aiapiproxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aiapiproxy
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      # Server configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8082
      
      # OpenAI API configuration (needs to be set)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      
      # Model mapping configuration
      - CLAUDE_HAIKU_MODEL=${CLAUDE_HAIKU_MODEL:-gpt-4o-mini}
      - CLAUDE_SONNET_MODEL=${CLAUDE_SONNET_MODEL:-gpt-4o}
      - CLAUDE_OPUS_MODEL=${CLAUDE_OPUS_MODEL:-gpt-4}
      
      # Request configuration
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-10485760}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-100}
      
      # Logging configuration
      - RUST_LOG=${RUST_LOG:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Security configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - CORS_ENABLED=${CORS_ENABLED:-true}
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network configuration
    networks:
      - aiapiproxy-network

# Optional: Add monitoring services
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - aiapiproxy-network
  
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #   networks:
  #     - aiapiproxy-network

networks:
  aiapiproxy-network:
    driver: bridge

# volumes:
#   grafana-storage:

# Development environment override configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  aiapiproxy:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder  # Use build stage for development
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
    environment:
      - RUST_LOG=debug
      - LOG_FORMAT=text
      - DEV_MODE=true
    command: cargo run
    ports:
      - "8082:8082"
      - "9229:9229"  # Debug port

volumes:
  cargo-cache:
  target-cache: